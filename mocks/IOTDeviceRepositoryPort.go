// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/liwaisi-tech/iot-mqtt-tem-subscriber/internal/domain/entities/iot_device"
	mock "github.com/stretchr/testify/mock"
)

// IOTDeviceRepositoryPort is an autogenerated mock type for the IOTDeviceRepositoryPort type
type IOTDeviceRepositoryPort struct {
	mock.Mock
}

// CreateIOTDevice provides a mock function with given fields: ctx, entity
func (_m *IOTDeviceRepositoryPort) CreateIOTDevice(ctx context.Context, entity *entities.IOTDeviceEntity) (string, error) {
	ret := _m.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for CreateIOTDevice")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.IOTDeviceEntity) (string, error)); ok {
		return rf(ctx, entity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.IOTDeviceEntity) string); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.IOTDeviceEntity) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIOTDeviceRepositoryPort creates a new instance of IOTDeviceRepositoryPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOTDeviceRepositoryPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOTDeviceRepositoryPort {
	mock := &IOTDeviceRepositoryPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
