// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/liwaisi-tech/iot-mqtt-tem-subscriber/internal/domain/entities/iot_device"
	mock "github.com/stretchr/testify/mock"
)

// IOTDeviceServicePort is an autogenerated mock type for the IOTDeviceServicePort type
type IOTDeviceServicePort struct {
	mock.Mock
}

// GetIOTDeviceByMACAddress provides a mock function with given fields: ctx, macAddress
func (_m *IOTDeviceServicePort) GetIOTDeviceByMACAddress(ctx context.Context, macAddress string) (*entities.IOTDeviceEntity, error) {
	ret := _m.Called(ctx, macAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetIOTDeviceByMACAddress")
	}

	var r0 *entities.IOTDeviceEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.IOTDeviceEntity, error)); ok {
		return rf(ctx, macAddress)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.IOTDeviceEntity); ok {
		r0 = rf(ctx, macAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.IOTDeviceEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, macAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIOTDeviceServicePort creates a new instance of IOTDeviceServicePort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOTDeviceServicePort(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOTDeviceServicePort {
	mock := &IOTDeviceServicePort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
